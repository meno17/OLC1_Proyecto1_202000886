package analisis;

// importaciones si fuese necesario
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
//import java.util.Math;

//parser (codigo accesible usando punto)  p.variable
parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la linea " +
            (s.left) + " y columna " + (s.right) +
            ". No se esperaba el componente: " + (s.value) + ".");
    }
    
    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico no recuperable en la linea " +
            (s.left) + " y columna " + (s.right) +
            ". No se esperaba el componente: " + (s.value) + ".");
    }
:}

// codigo interno de cup
action code
{:
    String codigoUsr="";


public class Variable {
    private String nombre;
    private String tipo;
    private String valor;

    // Constructor
    public Variable(String nombre, String tipo, String valor) {
        this.nombre = nombre;
        this.tipo = tipo;
        this.valor = valor;
    }

    // Getters y setters
    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getTipo() {
        return tipo;
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    public String getValor() {
        return valor;
    }

    public void setValor(String valor) {
        this.valor = valor;
    }

    @Override
    public String toString() {
        return "Variable{" +
                "nombre='" + nombre + '\'' +
                ", tipo='" + tipo + '\'' +
                ", valor='" + valor + '\'' +
                '}';
    }
}
        List<Variable> listaVariables = new ArrayList<>();


    private static Variable buscarVariablePorId(List<Variable> listaVariables, String id) {
        for (Variable variable : listaVariables) {
            if (variable.getNombre().equals(id)) {
                return variable;
            }
        }
        return null; // Si no se encuentra la variable con el ID dado
    }

:}

/* Especificación de símbolos terminales */

terminal String ID, TKNUMEROS;
terminal TKARRO, TKCI, TKCD, TKPI, TKPD, TKASIGNACIONI, TKCOMA, TKPCOMA, PROGRAM, END, VAR, ARR, SUM, RES, 
         MUL, DIV, MODULO, MEDIA, MEDIANA, MOD, VARIANZA, MAX, MIN, CONSOLE_PRINT, CONSOLE_COLUMN, DOUBLE, CHAR, CADENA,TKDOBLEP,TKASIGNACIOND;

non terminal programa, declaracion, tipo,  expresiones, expresion, lista_valores, valores, valor,
        instruccion, sentencia, body, asignacion, operacion, estadistica, impresion_consola, impresion_arreglo, comentario,
        operacion_aritmetica, arreglo_double, arreglo,valorid;



/* Producciones */
start with programa;

programa ::= PROGRAM body END PROGRAM {:  RESULT=codigoUsr;   :};

sentencia ::= declaracion 
      | instruccion ;

body ::= body sentencia 
        |sentencia;

declaracion ::= VAR TKDOBLEP tipo:t TKDOBLEP TKDOBLEP ID:id TKASIGNACIONI expresion:arr END TKPCOMA{:
 
                    /* Acción semántica para la declaración de variables */
                    String arreglo = arr.toString() ; // Obtener el arreglo de valores
                    Variable var1 = new Variable(id,t.toString(),arreglo);
                    String nombre = id; // Obtener el nombre de la variable
                    // Realizar alguna acción con la variable declarada
                    listaVariables.add(var1);
                    System.out.println(var1.nombre+ var1.tipo+var1.valor);
                :}
              | ARR TKDOBLEP tipo TKDOBLEP TKDOBLEP TKARRO ID:id TKASIGNACIONI lista_valores:arr  END TKPCOMA{: 
                    /* Acción semántica para la declaración de arreglos */
                    double[] arreglo = (double[]) arr; // Obtener el arreglo de valores
                    String nombre = id; // Obtener el nombre del arreglo
                    // Realizar alguna acción con el arreglo declarado
                :};

tipo ::= DOUBLE:e {:    RESULT=e;   :} 
       | CHAR:e {:    RESULT=e;   :};

lista_valores ::= TKCI valores:v TKCD{: 
                    /* Acción semántica para la lista de valores en un arreglo */
                    RESULT = (double[]) v; // Convertir la lista de valores a un arreglo de tipo double
                :}
               |TKNUMEROS
;

valores ::= valores:vs TKCOMA valor:v {: 
                /* Acción semántica para la lista de valores */
                double[] arreglo = (double[]) vs; // Obtener la lista de valores anterior
                double valor = (double) v; // Obtener el nuevo valor
                // Crear un nuevo arreglo con el valor añadido
                double[] nuevoArreglo = new double[arreglo.length + 1];
                // Copiar los valores anteriores al nuevo arreglo
                System.arraycopy(arreglo, 0, nuevoArreglo, 0, arreglo.length);
                // Añadir el nuevo valor al final del nuevo arreglo
                nuevoArreglo[arreglo.length] = valor;
                RESULT = nuevoArreglo; // Actualizar el resultado con el nuevo arreglo
            :}
          | valor:vs {: RESULT = new double[]{(double)vs}; :};

valor ::= TKNUMEROS:n {: RESULT = Double.parseDouble((String)n); :}
        | CADENA
        | valorid;



instruccion ::= asignacion
              | operacion
              | estadistica
              | impresion_consola
              | comentario;


operacion ::= VAR TKDOBLEP tipo TKDOBLEP TKDOBLEP ID:id TKASIGNACIONI operacion_aritmetica:o END TKPCOMA {: 
                    /* Acción semántica para la operación con variables */ 
                    double resultado = (double) o; // Obtener el resultado de la operación
                    String nombre = id; // Obtener el nombre de la variable
                    RESULT = resultado;
                    // Realizar alguna acción con el resultado de la operación
                :}
            | ARR TKDOBLEP tipo TKDOBLEP TKDOBLEP TKARRO ID:id TKASIGNACIOND operacion_aritmetica:o END TKPCOMA{: 
                    /* Acción semántica para la operación con arreglos */ 
                    double resultado = (double) o; // Obtener el resultado de la operación
                    String nombre = id; // Obtener el nombre del arreglo
                    
                    RESULT = resultado;
                    // Realizar alguna acción con el resultado de la operación
                :};

operacion_aritmetica ::= SUM TKPI expresion:e1 TKCOMA expresion:e2 TKPD{:
                            System.out.println(e1);
 
                            /* Acción semántica para la suma */
                            // Obtener los valores de las expresiones
                            double  valor1 = (Double)e1;
                            double  valor2 = (Double)e2;
                            // Calcular la suma
                            double  resultado = valor1 + valor2;
                            System.out.println(resultado);
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        :}
                       | RES TKPI expresion:e1 TKCOMA expresion:e2 TKPD{: 
                            /* Acción semántica para la resta */
                            // Obtener los valores de las expresiones
                            double  valor1 = (double)e1;
                            double  valor2 = (double)e2;
                            // Calcular la resta
                            double  resultado = valor1 - valor2;
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        :}
                       | MUL TKPI expresion:e1 TKCOMA expresion:e2 TKPD{: 
                            /* Acción semántica para la multiplicación */
                            // Obtener los valores de las expresiones
                            double  valor1 = (double)e1;
                            double  valor2 = (double)e2;
                            // Calcular la multiplicación
                            double  resultado = valor1 * valor2;
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        :}
                       | DIV TKPI expresion:e1 TKCOMA expresion:e2 TKPD{: 
                            /* Acción semántica para la división */
                            // Obtener los valores de las expresiones
                            double  valor1 = (double)e1;
                            double  valor2 = (double)e2;
                            // Verificar si se intenta dividir por cero
                            if (valor2 == 0) {
                                throw new RuntimeException("¡Error! División por cero.");
                            }
                            // Calcular la división
                            double  resultado = valor1 / valor2;
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        :}
                       | MODULO TKPI expresion:e1 TKCOMA expresion:e2 TKPD{: 
                            /* Acción semántica para el módulo */
                            // Obtener los valores de las expresiones
                            double  valor1 = (double)e1;
                            double  valor2 = (double)e2;
                            // Verificar si se intenta realizar el módulo por cero
                            if (valor2 == 0) {
                                throw new RuntimeException("¡Error! División por cero.");
                            }
                            // Calcular el módulo
                            double  resultado = valor1 % valor2;
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        :};

estadistica ::= MEDIA TKPI arreglo_double TKPD
              | MEDIANA TKPI arreglo_double TKPD
              | MOD TKPI arreglo_double TKPD
              | VARIANZA TKPI arreglo_double TKPD
              | MAX TKPI arreglo_double TKPD
              | MIN TKPI arreglo_double TKPD;


impresion_consola ::= CONSOLE_PRINT  expresiones:e  END TKPCOMA{:  codigoUsr+=e+"\n";  
    System.out.println(e);
     :};

expresiones ::= expresiones:es TKCOMA expresion:e {: RESULT =(String)es + ", " +(String) e; :}
              | expresion:es {: RESULT = es; :};

impresion_arreglo ::= CONSOLE_COLUMN TKPI CADENA TKARRO arreglo TKPD ;

arreglo ::= ID
          | lista_valores;

comentario ::= CADENA;

expresion ::= TKNUMEROS:e {:    RESULT=e;  :}
            | CADENA:e {:    RESULT=e;   :}
            | valorid:e {:    RESULT=e;   :}
;

valorid ::= ID:e{:
    Variable variableEncontrada = buscarVariablePorId(listaVariables, e);
    if (variableEncontrada != null) {
            System.out.println("Variable encontrada: " + variableEncontrada);
            RESULT =    variableEncontrada.valor;
        } else {
            RESULT = "";
            System.out.println("Variable con ID '" + e + "' no encontrada.");
        }
:}

;
