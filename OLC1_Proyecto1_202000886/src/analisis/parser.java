
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\006\000\002\013" +
    "\003\000\002\013\003\000\002\014\004\000\002\014\003" +
    "\000\002\003\014\000\002\003\015\000\002\004\003\000" +
    "\002\004\003\000\002\007\005\000\002\007\003\000\002" +
    "\010\005\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\016\014\000\002\016\015\000\002\023\010\000\002" +
    "\023\010\000\002\023\010\000\002\023\010\000\002\023" +
    "\010\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\020\006\000\002\005\005\000\002\005\003\000\002" +
    "\021\010\000\002\025\003\000\002\025\003\000\002\022" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\016\005\001\002\000\004\002\174\001" +
    "\002\000\026\020\030\021\007\027\026\030\023\031\006" +
    "\032\024\033\025\034\022\035\020\041\010\001\002\000" +
    "\004\011\171\001\002\000\004\042\141\001\002\000\030" +
    "\017\uffd8\020\uffd8\021\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\041\uffd8\001\002\000\030" +
    "\017\uffed\020\uffed\021\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\041\uffed\001\002\000\030" +
    "\017\ufffe\020\ufffe\021\ufffe\027\ufffe\030\ufffe\031\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\041\ufffe\001\002\000\030" +
    "\017\ufff0\020\ufff0\021\ufff0\027\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\041\ufff0\001\002\000\030" +
    "\017\136\020\030\021\007\027\026\030\023\031\006\032" +
    "\024\033\025\034\022\035\020\041\010\001\002\000\030" +
    "\017\uffff\020\uffff\021\uffff\027\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\034\uffff\035\uffff\041\uffff\001\002\000\030" +
    "\017\ufffc\020\ufffc\021\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\041\ufffc\001\002\000\030" +
    "\017\uffee\020\uffee\021\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\041\uffee\001\002\000\010" +
    "\004\051\005\044\041\041\001\002\000\030\017\uffec\020" +
    "\uffec\021\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\041\uffec\001\002\000\004\011\125\001" +
    "\002\000\004\011\122\001\002\000\004\011\117\001\002" +
    "\000\004\011\114\001\002\000\004\011\111\001\002\000" +
    "\030\017\uffef\020\uffef\021\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\041\uffef\001\002\000" +
    "\004\042\031\001\002\000\006\037\032\040\034\001\002" +
    "\000\004\042\ufff9\001\002\000\004\042\035\001\002\000" +
    "\004\042\ufff8\001\002\000\004\042\036\001\002\000\004" +
    "\004\037\001\002\000\004\013\040\001\002\000\022\004" +
    "\051\005\044\022\042\023\043\024\053\025\050\026\052" +
    "\041\041\001\002\000\010\012\uffd6\014\uffd6\017\uffd6\001" +
    "\002\000\004\011\104\001\002\000\004\011\077\001\002" +
    "\000\010\012\uffd7\014\uffd7\017\uffd7\001\002\000\010\012" +
    "\uffd5\014\uffd5\017\uffd5\001\002\000\004\017\075\001\002" +
    "\000\004\017\073\001\002\000\004\011\066\001\002\000" +
    "\012\010\uffd4\012\uffd4\014\uffd4\017\uffd4\001\002\000\004" +
    "\011\061\001\002\000\004\011\054\001\002\000\010\004" +
    "\051\005\044\041\041\001\002\000\004\014\056\001\002" +
    "\000\010\004\051\005\044\041\041\001\002\000\004\012" +
    "\060\001\002\000\004\017\uffe7\001\002\000\010\004\051" +
    "\005\044\041\041\001\002\000\004\014\063\001\002\000" +
    "\010\004\051\005\044\041\041\001\002\000\004\012\065" +
    "\001\002\000\004\017\uffe5\001\002\000\010\004\051\005" +
    "\044\041\041\001\002\000\004\014\070\001\002\000\010" +
    "\004\051\005\044\041\041\001\002\000\004\012\072\001" +
    "\002\000\004\017\uffe6\001\002\000\004\015\074\001\002" +
    "\000\030\017\ufffb\020\ufffb\021\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\041\ufffb\001\002" +
    "\000\004\015\076\001\002\000\030\017\uffeb\020\uffeb\021" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\041\uffeb\001\002\000\010\004\051\005\044\041" +
    "\041\001\002\000\004\014\101\001\002\000\010\004\051" +
    "\005\044\041\041\001\002\000\004\012\103\001\002\000" +
    "\004\017\uffe8\001\002\000\010\004\051\005\044\041\041" +
    "\001\002\000\004\014\106\001\002\000\010\004\051\005" +
    "\044\041\041\001\002\000\004\012\110\001\002\000\004" +
    "\017\uffe9\001\002\000\002\001\002\000\004\012\113\001" +
    "\002\000\030\017\uffe4\020\uffe4\021\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\041\uffe4\001" +
    "\002\000\002\001\002\000\004\012\116\001\002\000\030" +
    "\017\uffe0\020\uffe0\021\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\041\uffe0\001\002\000\002" +
    "\001\002\000\004\012\121\001\002\000\030\017\uffe1\020" +
    "\uffe1\021\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\041\uffe1\001\002\000\002\001\002\000" +
    "\004\012\124\001\002\000\030\017\uffe3\020\uffe3\021\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\041\uffe3\001\002\000\002\001\002\000\004\012\127" +
    "\001\002\000\030\017\uffdf\020\uffdf\021\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\041\uffdf" +
    "\001\002\000\006\014\132\017\133\001\002\000\006\014" +
    "\uffdc\017\uffdc\001\002\000\010\004\051\005\044\041\041" +
    "\001\002\000\004\015\134\001\002\000\030\017\uffde\020" +
    "\uffde\021\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\041\uffde\001\002\000\006\014\uffdd\017" +
    "\uffdd\001\002\000\004\016\140\001\002\000\030\017\ufffd" +
    "\020\ufffd\021\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\041\ufffd\001\002\000\004\002\000" +
    "\001\002\000\006\037\032\040\034\001\002\000\004\042" +
    "\143\001\002\000\004\042\144\001\002\000\004\006\145" +
    "\001\002\000\004\004\146\001\002\000\006\013\150\043" +
    "\147\001\002\000\014\022\042\023\043\024\053\025\050" +
    "\026\052\001\002\000\006\005\153\007\152\001\002\000" +
    "\004\017\164\001\002\000\010\004\051\005\155\041\160" +
    "\001\002\000\004\017\ufff6\001\002\000\006\010\ufff4\014" +
    "\ufff4\001\002\000\006\010\ufff3\014\ufff3\001\002\000\006" +
    "\010\162\014\161\001\002\000\006\010\ufff1\014\ufff1\001" +
    "\002\000\006\010\ufff2\014\ufff2\001\002\000\010\004\051" +
    "\005\155\041\160\001\002\000\004\017\ufff7\001\002\000" +
    "\006\010\ufff5\014\ufff5\001\002\000\004\015\165\001\002" +
    "\000\030\017\ufffa\020\ufffa\021\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\041\ufffa\001\002" +
    "\000\004\017\167\001\002\000\004\015\170\001\002\000" +
    "\030\017\uffea\020\uffea\021\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\035\uffea\041\uffea\001\002\000" +
    "\002\001\002\000\004\012\173\001\002\000\030\017\uffe2" +
    "\020\uffe2\021\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\041\uffe2\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\002\003\001\001\000\002\001\001\000" +
    "\024\003\014\012\011\013\015\014\013\015\012\016\026" +
    "\017\016\020\010\022\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\014\012\011\013" +
    "\136\015\012\016\026\017\016\020\010\022\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\127\006\130\026\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\046\023\045\026" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\054\026" +
    "\044\001\001\000\002\001\001\000\006\006\056\026\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\061\026\044\001\001\000\002\001\001\000\006\006\063" +
    "\026\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\066\026\044\001\001\000\002\001\001\000\006" +
    "\006\070\026\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\077\026\044\001\001\000" +
    "\002\001\001\000\006\006\101\026\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\104\026\044\001" +
    "\001\000\002\001\001\000\006\006\106\026\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\134\026" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\165\001\001\000\004\007\150\001\001" +
    "\000\002\001\001\000\010\010\155\011\153\026\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\162\026\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la linea " +
            (s.left) + " y columna " + (s.right) +
            ". No se esperaba el componente: " + (s.value) + ".");
    }
    
    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico no recuperable en la linea " +
            (s.left) + " y columna " + (s.right) +
            ". No se esperaba el componente: " + (s.value) + ".");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    String codigoUsr="";


public class Variable {
    private String nombre;
    private String tipo;
    private String valor;

    // Constructor
    public Variable(String nombre, String tipo, String valor) {
        this.nombre = nombre;
        this.tipo = tipo;
        this.valor = valor;
    }

    // Getters y setters
    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getTipo() {
        return tipo;
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    public String getValor() {
        return valor;
    }

    public void setValor(String valor) {
        this.valor = valor;
    }

    @Override
    public String toString() {
        return "Variable{" +
                "nombre='" + nombre + '\'' +
                ", tipo='" + tipo + '\'' +
                ", valor='" + valor + '\'' +
                '}';
    }
}
        List<Variable> listaVariables = new ArrayList<>();


    private static Variable buscarVariablePorId(List<Variable> listaVariables, String id) {
        for (Variable variable : listaVariables) {
            if (variable.getNombre().equals(id)) {
                return variable;
            }
        }
        return null; // Si no se encuentra la variable con el ID dado
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= PROGRAM body END PROGRAM 
            {
              Object RESULT =null;
		  RESULT=codigoUsr;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencia ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= body sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= VAR TKDOBLEP tipo TKDOBLEP TKDOBLEP ID TKASIGNACIONI expresion END TKPCOMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
 
                    /* Acción semántica para la declaración de variables */
                    String arreglo = arr.toString() ; // Obtener el arreglo de valores
                    Variable var1 = new Variable(id,t.toString(),arreglo);
                    String nombre = id; // Obtener el nombre de la variable
                    // Realizar alguna acción con la variable declarada
                    listaVariables.add(var1);
                    System.out.println(var1.nombre+ var1.tipo+var1.valor);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= ARR TKDOBLEP tipo TKDOBLEP TKDOBLEP TKARRO ID TKASIGNACIONI lista_valores END TKPCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    /* Acción semántica para la declaración de arreglos */
                    double[] arreglo = (double[]) arr; // Obtener el arreglo de valores
                    String nombre = id; // Obtener el nombre del arreglo
                    // Realizar alguna acción con el arreglo declarado
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=e;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=e;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_valores ::= TKCI valores TKCD 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    /* Acción semántica para la lista de valores en un arreglo */
                    RESULT = (double[]) v; // Convertir la lista de valores a un arreglo de tipo double
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_valores ::= TKNUMEROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // valores ::= valores TKCOMA valor 
            {
              Object RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                /* Acción semántica para la lista de valores */
                double[] arreglo = (double[]) vs; // Obtener la lista de valores anterior
                double valor = (double) v; // Obtener el nuevo valor
                // Crear un nuevo arreglo con el valor añadido
                double[] nuevoArreglo = new double[arreglo.length + 1];
                // Copiar los valores anteriores al nuevo arreglo
                System.arraycopy(arreglo, 0, nuevoArreglo, 0, arreglo.length);
                // Añadir el nuevo valor al final del nuevo arreglo
                nuevoArreglo[arreglo.length] = valor;
                RESULT = nuevoArreglo; // Actualizar el resultado con el nuevo arreglo
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // valores ::= valor 
            {
              Object RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new double[]{(double)vs}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valor ::= TKNUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Double.parseDouble((String)n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valor ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valor ::= valorid 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= estadistica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= impresion_consola 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacion ::= VAR TKDOBLEP tipo TKDOBLEP TKDOBLEP ID TKASIGNACIONI operacion_aritmetica END TKPCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    /* Acción semántica para la operación con variables */ 
                    double resultado = (double) o; // Obtener el resultado de la operación
                    String nombre = id; // Obtener el nombre de la variable
                    RESULT = resultado;
                    // Realizar alguna acción con el resultado de la operación
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operacion ::= ARR TKDOBLEP tipo TKDOBLEP TKDOBLEP TKARRO ID TKASIGNACIOND operacion_aritmetica END TKPCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    /* Acción semántica para la operación con arreglos */ 
                    double resultado = (double) o; // Obtener el resultado de la operación
                    String nombre = id; // Obtener el nombre del arreglo
                    
                    RESULT = resultado;
                    // Realizar alguna acción con el resultado de la operación
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacion_aritmetica ::= SUM TKPI expresion TKCOMA expresion TKPD 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            System.out.println(e1);
 
                            /* Acción semántica para la suma */
                            // Obtener los valores de las expresiones
                            double  valor1 = (Double)e1;
                            double  valor2 = (Double)e2;
                            // Calcular la suma
                            double  resultado = valor1 + valor2;
                            System.out.println(resultado);
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacion_aritmetica ::= RES TKPI expresion TKCOMA expresion TKPD 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                            /* Acción semántica para la resta */
                            // Obtener los valores de las expresiones
                            double  valor1 = (double)e1;
                            double  valor2 = (double)e2;
                            // Calcular la resta
                            double  resultado = valor1 - valor2;
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacion_aritmetica ::= MUL TKPI expresion TKCOMA expresion TKPD 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                            /* Acción semántica para la multiplicación */
                            // Obtener los valores de las expresiones
                            double  valor1 = (double)e1;
                            double  valor2 = (double)e2;
                            // Calcular la multiplicación
                            double  resultado = valor1 * valor2;
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacion_aritmetica ::= DIV TKPI expresion TKCOMA expresion TKPD 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                            /* Acción semántica para la división */
                            // Obtener los valores de las expresiones
                            double  valor1 = (double)e1;
                            double  valor2 = (double)e2;
                            // Verificar si se intenta dividir por cero
                            if (valor2 == 0) {
                                throw new RuntimeException("¡Error! División por cero.");
                            }
                            // Calcular la división
                            double  resultado = valor1 / valor2;
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion_aritmetica ::= MODULO TKPI expresion TKCOMA expresion TKPD 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                            /* Acción semántica para el módulo */
                            // Obtener los valores de las expresiones
                            double  valor1 = (double)e1;
                            double  valor2 = (double)e2;
                            // Verificar si se intenta realizar el módulo por cero
                            if (valor2 == 0) {
                                throw new RuntimeException("¡Error! División por cero.");
                            }
                            // Calcular el módulo
                            double  resultado = valor1 % valor2;
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // estadistica ::= MEDIA TKPI arreglo_double TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estadistica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // estadistica ::= MEDIANA TKPI arreglo_double TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estadistica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // estadistica ::= MOD TKPI arreglo_double TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estadistica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // estadistica ::= VARIANZA TKPI arreglo_double TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estadistica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // estadistica ::= MAX TKPI arreglo_double TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estadistica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estadistica ::= MIN TKPI arreglo_double TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estadistica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // impresion_consola ::= CONSOLE_PRINT expresiones END TKPCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  codigoUsr+=e+"\n";  
    System.out.println(e);
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion_consola",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresiones ::= expresiones TKCOMA expresion 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =(String)es + ", " +(String) e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresiones ::= expresion 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // impresion_arreglo ::= CONSOLE_COLUMN TKPI CADENA TKARRO arreglo TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion_arreglo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arreglo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arreglo ::= lista_valores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comentario ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentario",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= TKNUMEROS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=e;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=e;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= valorid 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT=e;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valorid ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Variable variableEncontrada = buscarVariablePorId(listaVariables, e);
    if (variableEncontrada != null) {
            System.out.println("Variable encontrada: " + variableEncontrada);
            RESULT =    variableEncontrada.valor;
        } else {
            RESULT = "";
            System.out.println("Variable con ID '" + e + "' no encontrada.");
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorid",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
