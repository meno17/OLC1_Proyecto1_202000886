
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\002\000\002\004\013\000\002\004\014" +
    "\000\002\006\003\000\002\006\003\000\002\011\005\000" +
    "\002\012\005\000\002\012\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\005\004\000\002\005" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\016\013\000\002\016\014\000\002\023\010\000\002" +
    "\023\010\000\002\023\010\000\002\023\010\000\002\023" +
    "\010\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\024\003\000\002\020\006\000\002\007\005\000\002" +
    "\007\003\000\002\021\010\000\002\025\003\000\002\025" +
    "\003\000\002\022\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\015\005\001\002\000\004\002\216\001" +
    "\002\000\030\017\ufffe\020\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\040\ufffe\001" +
    "\002\000\030\017\032\020\012\026\027\027\024\030\007" +
    "\031\025\032\026\033\023\034\020\035\021\040\011\001" +
    "\002\000\004\007\213\001\002\000\032\016\175\017\177" +
    "\020\174\026\027\027\024\030\007\031\025\032\026\033" +
    "\023\034\020\035\021\040\011\001\002\000\032\016\uffd7" +
    "\017\uffd7\020\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\040\uffd7\001\002\000\004" +
    "\042\157\001\002\000\032\016\uffee\017\uffee\020\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\040\uffee\001\002\000\032\016\ufff2\017\ufff2\020" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\040\ufff2\001\002\000\032\016\ufff1\017" +
    "\ufff1\020\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\040\ufff1\001\002\000\030\017" +
    "\uffff\020\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff" +
    "\033\uffff\034\uffff\035\uffff\040\uffff\001\002\000\032\016" +
    "\uffef\017\uffef\020\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\040\uffef\001\002\000" +
    "\004\007\151\001\002\000\004\007\142\001\002\000\032" +
    "\016\uffec\017\uffec\020\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\040\uffec\001\002" +
    "\000\004\007\137\001\002\000\004\007\134\001\002\000" +
    "\004\007\131\001\002\000\004\007\126\001\002\000\004" +
    "\007\123\001\002\000\032\016\uffed\017\uffed\020\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\040\uffed\001\002\000\032\016\ufff0\017\ufff0\020" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\040\ufff0\001\002\000\004\042\033\001" +
    "\002\000\006\036\034\037\036\001\002\000\004\041\ufffb" +
    "\001\002\000\004\041\037\001\002\000\004\041\ufffa\001" +
    "\002\000\002\001\002\000\004\011\041\001\002\000\016" +
    "\005\052\021\042\022\043\023\051\024\047\025\050\001" +
    "\002\000\004\007\116\001\002\000\004\007\111\001\002" +
    "\000\006\010\uffde\016\uffde\001\002\000\004\016\107\001" +
    "\002\000\004\016\105\001\002\000\004\007\100\001\002" +
    "\000\004\007\073\001\002\000\004\007\063\001\002\000" +
    "\006\014\055\040\057\001\002\000\006\006\ufff4\012\ufff4" +
    "\001\002\000\006\006\ufff7\012\ufff7\001\002\000\006\006" +
    "\ufff6\012\ufff6\001\002\000\006\006\061\012\060\001\002" +
    "\000\006\006\ufff5\012\ufff5\001\002\000\006\014\055\040" +
    "\057\001\002\000\006\010\ufff9\016\ufff9\001\002\000\006" +
    "\006\ufff8\012\ufff8\001\002\000\006\014\065\040\066\001" +
    "\002\000\006\010\uffd4\012\uffd4\001\002\000\006\010\uffd6" +
    "\012\uffd6\001\002\000\006\010\uffd5\012\uffd5\001\002\000" +
    "\004\012\070\001\002\000\006\014\065\040\066\001\002" +
    "\000\004\010\072\001\002\000\004\016\uffe7\001\002\000" +
    "\006\014\065\040\066\001\002\000\004\012\075\001\002" +
    "\000\006\014\065\040\066\001\002\000\004\010\077\001" +
    "\002\000\004\016\uffe5\001\002\000\006\014\065\040\066" +
    "\001\002\000\004\012\102\001\002\000\006\014\065\040" +
    "\066\001\002\000\004\010\104\001\002\000\004\016\uffe6" +
    "\001\002\000\004\013\106\001\002\000\032\016\uffeb\017" +
    "\uffeb\020\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\040\uffeb\001\002\000\004\013" +
    "\110\001\002\000\030\017\ufffd\020\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\040" +
    "\ufffd\001\002\000\006\014\065\040\066\001\002\000\004" +
    "\012\113\001\002\000\006\014\065\040\066\001\002\000" +
    "\004\010\115\001\002\000\004\016\uffe8\001\002\000\006" +
    "\014\065\040\066\001\002\000\004\012\120\001\002\000" +
    "\006\014\065\040\066\001\002\000\004\010\122\001\002" +
    "\000\004\016\uffe9\001\002\000\004\005\052\001\002\000" +
    "\004\010\125\001\002\000\032\016\uffe4\017\uffe4\020\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\040\uffe4\001\002\000\004\005\052\001\002" +
    "\000\004\010\130\001\002\000\032\016\uffe0\017\uffe0\020" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\040\uffe0\001\002\000\004\005\052\001" +
    "\002\000\004\010\133\001\002\000\032\016\uffe1\017\uffe1" +
    "\020\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\040\uffe1\001\002\000\004\005\052" +
    "\001\002\000\004\010\136\001\002\000\032\016\uffe3\017" +
    "\uffe3\020\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\040\uffe3\001\002\000\004\005" +
    "\052\001\002\000\004\010\141\001\002\000\032\016\uffdf" +
    "\017\uffdf\020\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\040\uffdf\001\002\000\004" +
    "\040\143\001\002\000\004\004\144\001\002\000\004\005" +
    "\052\001\002\000\004\010\uffd9\001\002\000\004\010\uffd8" +
    "\001\002\000\004\010\150\001\002\000\032\016\uffda\017" +
    "\uffda\020\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\040\uffda\001\002\000\006\014" +
    "\065\040\066\001\002\000\006\010\154\012\155\001\002" +
    "\000\006\010\uffdb\012\uffdb\001\002\000\032\016\uffdd\017" +
    "\uffdd\020\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\040\uffdd\001\002\000\006\014" +
    "\065\040\066\001\002\000\006\010\uffdc\012\uffdc\001\002" +
    "\000\006\036\034\037\036\001\002\000\004\041\161\001" +
    "\002\000\004\004\162\001\002\000\002\001\002\000\006" +
    "\011\165\043\164\001\002\000\014\021\042\022\043\023" +
    "\051\024\047\025\050\001\002\000\004\005\052\001\002" +
    "\000\004\016\167\001\002\000\004\013\170\001\002\000" +
    "\030\017\ufffc\020\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\035\ufffc\040\ufffc\001\002\000" +
    "\004\016\172\001\002\000\004\013\173\001\002\000\032" +
    "\016\uffea\017\uffea\020\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\040\uffea\001\002" +
    "\000\004\042\206\001\002\000\004\015\205\001\002\000" +
    "\032\016\ufff3\017\ufff3\020\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\040\ufff3\001" +
    "\002\000\004\042\200\001\002\000\006\036\034\037\036" +
    "\001\002\000\004\041\202\001\002\000\002\001\002\000" +
    "\004\011\204\001\002\000\014\021\042\022\043\023\051" +
    "\024\047\025\050\001\002\000\004\002\000\001\002\000" +
    "\006\036\034\037\036\001\002\000\004\041\210\001\002" +
    "\000\004\004\211\001\002\000\002\001\002\000\004\043" +
    "\164\001\002\000\004\005\052\001\002\000\004\010\215" +
    "\001\002\000\032\016\uffe2\017\uffe2\020\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\040\uffe2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\024\004\015\005\007\014\013" +
    "\015\014\016\030\017\016\020\012\021\027\022\021\001" +
    "\001\000\002\001\001\000\020\014\175\015\014\016\030" +
    "\017\016\020\012\021\027\022\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\037" +
    "\001\001\000\002\001\001\000\010\011\043\023\045\024" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\055" +
    "\013\053\026\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\061\026\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\066\026\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\070\026\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\073\026\063\001\001\000" +
    "\002\001\001\000\006\010\075\026\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\100\026\063\001" +
    "\001\000\002\001\001\000\006\010\102\026\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\111\026\063\001\001\000\002\001\001\000\006\010" +
    "\113\026\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\116\026\063\001\001\000\002\001\001\000" +
    "\006\010\120\026\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\043\024\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\043\024\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\043\024" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\043\024\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\043\024\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\145\025\146\026\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\151\010\152\026\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\155\026" +
    "\063\001\001\000\002\001\001\000\004\006\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\162\001" +
    "\001\000\002\001\001\000\004\023\170\001\001\000\004" +
    "\011\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\200\001\001\000\002" +
    "\001\001\000\004\026\202\001\001\000\002\001\001\000" +
    "\004\023\045\001\001\000\002\001\001\000\004\006\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\211\001\001\000\002\001\001\000\006\011\043\024\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la linea " +
            (s.left) + " y columna " + (s.right) +
            ". No se esperaba el componente: " + (s.value) + ".");
    }
    
    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico no recuperable en la linea " +
            (s.left) + " y columna " + (s.right) +
            ". No se esperaba el componente: " + (s.value) + ".");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    String codigoUsr="";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= PROGRAM declaraciones instrucciones END PROGRAM 
            {
              Object RESULT =null;
		  RESULT=codigoUsr;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion ::= VAR TKDOBLEP tipo TKDDOBLEP ID TKASIGNACIONI arreglo_double END TKPCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    /* Acción semántica para la declaración de variables */
                    double[] arreglo = (double[]) arr ; // Obtener el arreglo de valores
                    String nombre = id; // Obtener el nombre de la variable
                    // Realizar alguna acción con la variable declarada
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= ARR TKDOBLEP tipo TKDDOBLEP TKARRO ID TKASIGNACIONI lista_valores END TKPCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    /* Acción semántica para la declaración de arreglos */
                    double[] arreglo = (double[]) arr; // Obtener el arreglo de valores
                    String nombre = id; // Obtener el nombre del arreglo
                    // Realizar alguna acción con el arreglo declarado
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_valores ::= TKCI valores TKCD 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    /* Acción semántica para la lista de valores en un arreglo */
                    RESULT = (double[]) v; // Convertir la lista de valores a un arreglo de tipo double
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valores",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valores ::= valores TKCOMA valor 
            {
              Object RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                /* Acción semántica para la lista de valores */
                double[] arreglo = (double[]) vs; // Obtener la lista de valores anterior
                double valor = (double) v; // Obtener el nuevo valor
                // Crear un nuevo arreglo con el valor añadido
                double[] nuevoArreglo = new double[arreglo.length + 1];
                // Copiar los valores anteriores al nuevo arreglo
                System.arraycopy(arreglo, 0, nuevoArreglo, 0, arreglo.length);
                // Añadir el nuevo valor al final del nuevo arreglo
                nuevoArreglo[arreglo.length] = valor;
                RESULT = nuevoArreglo; // Actualizar el resultado con el nuevo arreglo
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valores ::= valor 
            {
              Object RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new double[]{(double)vs}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valor ::= TKNUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Double.parseDouble((String)n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // valor ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // valor ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= estadistica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= impresion_consola 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= impresion_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacion ::= VAR TKDOBLEP tipo TKDDOBLEP ID TKASIGNACIONI operacion_aritmetica END TKPCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    /* Acción semántica para la operación con variables */ 
                    double resultado = (double) o; // Obtener el resultado de la operación
                    String nombre = id; // Obtener el nombre de la variable
                    RESULT = resultado;
                    // Realizar alguna acción con el resultado de la operación
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operacion ::= ARR TKDOBLEP tipo TKDDOBLEP TKARRO ID TKASIGNACIOND operacion_aritmetica END TKPCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    /* Acción semántica para la operación con arreglos */ 
                    double resultado = (double) o; // Obtener el resultado de la operación
                    String nombre = id; // Obtener el nombre del arreglo
                    
                    RESULT = resultado;
                    // Realizar alguna acción con el resultado de la operación
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacion_aritmetica ::= SUM TKPI expresion TKCOMA expresion TKPD 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                            /* Acción semántica para la suma */
                            // Obtener los valores de las expresiones
                            double  valor1 = (double)e1;
                            double  valor2 = (double)e2;
                            // Calcular la suma
                            double  resultado = valor1 + valor2;
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacion_aritmetica ::= RES TKPI expresion TKCOMA expresion TKPD 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                            /* Acción semántica para la resta */
                            // Obtener los valores de las expresiones
                            double  valor1 = (double)e1;
                            double  valor2 = (double)e2;
                            // Calcular la resta
                            double  resultado = valor1 - valor2;
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacion_aritmetica ::= MUL TKPI expresion TKCOMA expresion TKPD 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                            /* Acción semántica para la multiplicación */
                            // Obtener los valores de las expresiones
                            double  valor1 = (double)e1;
                            double  valor2 = (double)e2;
                            // Calcular la multiplicación
                            double  resultado = valor1 * valor2;
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacion_aritmetica ::= DIV TKPI expresion TKCOMA expresion TKPD 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                            /* Acción semántica para la división */
                            // Obtener los valores de las expresiones
                            double  valor1 = (double)e1;
                            double  valor2 = (double)e2;
                            // Verificar si se intenta dividir por cero
                            if (valor2 == 0) {
                                throw new RuntimeException("¡Error! División por cero.");
                            }
                            // Calcular la división
                            double  resultado = valor1 / valor2;
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion_aritmetica ::= MODULO TKPI expresion TKCOMA expresion TKPD 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                            /* Acción semántica para el módulo */
                            // Obtener los valores de las expresiones
                            double  valor1 = (double)e1;
                            double  valor2 = (double)e2;
                            // Verificar si se intenta realizar el módulo por cero
                            if (valor2 == 0) {
                                throw new RuntimeException("¡Error! División por cero.");
                            }
                            // Calcular el módulo
                            double  resultado = valor1 % valor2;
                            // Guardar el resultado en la pila de valores
                            RESULT = resultado;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // estadistica ::= MEDIA TKPI arreglo_double TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estadistica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // estadistica ::= MEDIANA TKPI arreglo_double TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estadistica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // estadistica ::= MOD TKPI arreglo_double TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estadistica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // estadistica ::= VARIANZA TKPI arreglo_double TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estadistica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // estadistica ::= MAX TKPI arreglo_double TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estadistica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estadistica ::= MIN TKPI arreglo_double TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estadistica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arreglo_double ::= lista_valores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_double",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // impresion_consola ::= CONSOLE_PRINT TKPI expresiones TKPD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  codigoUsr+=e+"\n";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion_consola",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresiones ::= expresiones TKCOMA expresion 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = es + ", " + e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresiones ::= expresion 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // impresion_arreglo ::= CONSOLE_COLUMN TKPI CADENA TKARRO arreglo TKPD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion_arreglo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arreglo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arreglo ::= lista_valores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comentario ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentario",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= TKNUMEROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
